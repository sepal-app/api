"""remove permission tables

Revision ID: 4bead58c099b
Revises: 1d0c1f97e73b
Create Date: 2020-11-28 17:13:52.797715

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "4bead58c099b"
down_revision = "1d0c1f97e73b"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    role_enum = postgresql.ENUM(
        "admin", "guest", "member", "owner", name="organization_user_role_enum",
    )
    role_enum.create(op.get_bind())
    op.drop_table("role_permission")
    op.drop_table("user_permission")
    op.drop_table("role_member")
    op.drop_table("role")
    op.add_column(
        "organization_user",
        sa.Column(
            "created_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
    )
    op.add_column(
        "organization_user",
        sa.Column("role", type_=role_enum, nullable=False, server_default="owner"),
    )
    op.add_column(
        "organization_user",
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', CURRENT_TIMESTAMP)"),
            nullable=False,
        ),
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("organization_user", "updated_at")
    op.drop_column("organization_user", "role")
    op.execute("DROP TYPE organization_user_role_enum")
    op.drop_column("organization_user", "created_at")
    op.create_table(
        "role",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('role_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"], ["organization.id"], name="role_organization_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="role_pkey"),
        sa.UniqueConstraint(
            "organization_id", "name", name="role_organization_id_name_key"
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "role_member",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name="role_member_role_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="role_member_pkey"),
        sa.UniqueConstraint(
            "role_id", "user_id", name="role_member_role_id_user_id_key"
        ),
    )
    op.create_table(
        "user_permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("organization_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["organization_id"],
            ["organization.id"],
            name="user_permission_organization_id_fkey",
        ),
        sa.PrimaryKeyConstraint("id", name="user_permission_pkey"),
        sa.UniqueConstraint(
            "user_id",
            "organization_id",
            "name",
            name="user_permission_user_id_organization_id_name_key",
        ),
    )
    op.create_table(
        "role_permission",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("timezone('utc'::text, CURRENT_TIMESTAMP)"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["role_id"], ["role.id"], name="role_permission_role_id_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="role_permission_pkey"),
        sa.UniqueConstraint("role_id", "name", name="role_permission_role_id_name_key"),
    )
    # ### end Alembic commands ###
